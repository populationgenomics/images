name: Deploy all in images.toml
on: [workflow_dispatch, push]

jobs:
  read_toml:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set_matrix.outputs.matrix }}
    steps:
      - name: "checkout repo"
        uses: actions/checkout@v2

      - name: "gcloud setup"
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: analysis-runner
          service_account_key: ${{ secrets.GCP_SERVER_DEPLOY_KEY }}

      - name: "gcloud docker auth"
        run: |
          gcloud auth configure-docker australia-southeast1-docker.pkg.dev

      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: "Read TOML"
        id: read_toml
        uses: jannekem/run-python-script-action@v1
        with:
          script: |
            import tomllib, os
            d = tomllib.load(open("images.toml", "rb"))
            print({
              "include": [
                {"name": name, "tag": tag} 
                for name, tag in d['images'].items()
              ]
            })

      - name: "Set matrix"
        id: set_matrix
        run: |
          echo "::set-output name=matrix::${{ steps.read_toml.outputs.stdout }}"

  deploy_all_in_toml:
    runs-on: ubuntu-latest
    needs:
      - read_toml
    strategy:
      matrix: ${{fromJson(needs.read_toml.outputs.matrix)}}
    env:
      DOCKER_BUILDKIT: 1
      BUILDKIT_PROGRESS: plain
      CLOUDSDK_CORE_DISABLE_PROMPTS: 1
      PREFIX: australia-southeast1-docker.pkg.dev/cpg-common/images
      NAME: ${{ matrix.name }}
      TAG: ${{ matrix.tag }}
    steps:
      - name: "checkout repo"
        uses: actions/checkout@v2

      - name: "gcloud setup"
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: analysis-runner
          service_account_key: ${{ secrets.GCP_SERVER_DEPLOY_KEY }}

      - name: "gcloud docker auth"
        run: |
          gcloud auth configure-docker australia-southeast1-docker.pkg.dev
          
      - name: "build image"
        run: |
          docker build --build-arg VERSION=${TAG} --tag ${PREFIX}/${NAME}:${TAG} images/${NAME}

      - name: "push image"
        run: |
          docker push ${PREFIX}/${NAME}:${TAG}
