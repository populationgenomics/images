name: Get Expected Tags for Dockerfile Changes

on:
  pull_request:
    types: [opened, synchronize]

permissions:
  id-token: write
  contents: read

env:
  PROJECT: 'cpg-common'

jobs:
  get_next_version:
    runs-on: ubuntu-latest
    environment: production
    outputs:
      matrix: ${{ steps.get_next_version.outputs.next_version }}
    steps:
      - name: 'Checkout repo'
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref || github.ref }}
          fetch-depth: 0

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - id: 'google-cloud-auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: 'projects/1051897107465/locations/global/workloadIdentityPools/github-pool/providers/github-provider'
          service_account: 'gh-images-deployer@cpg-common.iam.gserviceaccount.com'

      - id: 'google-cloud-sdk-setup'
        name: 'Set up Cloud SDK'
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT }}

      - name: 'Get current version'
        id: get_next_version
        run: |
          next_version=$(python .github/workflows/get_version.py)
          echo "next_version=$next_version" >> "$GITHUB_OUTPUT"

  post-version-table:
    runs-on: ubuntu-latest
    needs:
      - get_next_version
    if: ${{ needs.get_next_version.outputs.matrix != '{}' && needs.get_next_version.outputs.matrix != '' }}
    steps:
      - name: Read matrix JSON
        id: read-matrix
        run: |
          MATRIX_JSON=${{ needs.get_next_version.outputs.matrix }}
          echo "Extracted JSON: $MATRIX_JSON"

          # Convert JSON to Markdown table format
          TABLE="| Name  | Tag |\n|-------|-------|"
          for row in $(echo "$MATRIX_JSON" | jq -c '.include[]'); do
            NAME=$(echo "$row" | jq -r '.name')
            TAG=$(echo "$row" | jq -r '.tag')
            TABLE="$TABLE\n| $NAME | $TAG |"
          done

          # Save as output for later use
          echo "table<<EOF" >> $GITHUB_ENV
          echo "$TABLE" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Find Existing PR Comment
        id: find-comment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          COMMENTS_URL="https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments"
          COMMENT_ID=$(curl -s -H "Authorization: token $GITHUB_TOKEN" $COMMENTS_URL | jq -r '.[] | select(.body | startswith("### üê≥ Dockerfile Version Changes")) | .id')

          if [ -n "$COMMENT_ID" ]; then
            echo "comment_id=$COMMENT_ID" >> $GITHUB_ENV
          fi

      - name: Update or Create PR Comment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          COMMENT_BODY="### üê≥ Dockerfile Version Changes\n\n$TABLE"
          COMMENTS_URL="https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments"

          if [ -n "${{ env.comment_id }}" ]; then
            echo "Updating existing comment..."
            curl -s -X PATCH \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/issues/comments/${{ env.comment_id }}" \
              -d "{\"body\": \"$COMMENT_BODY\"}"
          else
            echo "Creating new comment..."
            curl -s -X POST \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              "$COMMENTS_URL" \
              -d "{\"body\": \"$COMMENT_BODY\"}"
          fi
